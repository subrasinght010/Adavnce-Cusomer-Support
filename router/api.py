# routes/api.py
"""
API Routes - Main endpoints for inbound/outbound operations
"""

from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.ext.asyncio import AsyncSession
from pydantic import BaseModel
from typing import Optional, List
import logging

from database.db import get_db
from database.crud import DBManager
from state.optimized_workflow_state import create_initial_state
from langgraph_workflows.workflows import workflow_router
from langchain_agents.lead_manager_agent import lead_manager_agent

logger = logging.getLogger(__name__)
router = APIRouter()


# ============================================================================
# REQUEST MODELS
# ============================================================================

class InboundMessageRequest(BaseModel):
    lead_id: str
    message: str
    channel: str  # whatsapp, sms, email, call
    lead_data: Optional[dict] = None


class OutboundCallRequest(BaseModel):
    phone: str
    lead_id: Optional[str] = None
    call_type: str = "cold"  # cold, warm, hot, follow_up
    client_type: str = "professional"


class ApprovalRequest(BaseModel):
    lead_ids: List[str]
    approved_by: str


# ============================================================================
# INBOUND ENDPOINTS
# ============================================================================

@router.post("/inbound/message")
async def handle_inbound_message(
    req: InboundMessageRequest,
    db: AsyncSession = Depends(get_db)
):
    """Handle inbound message (SMS/WhatsApp/Email/Web)"""
    
    try:
        # Get or create lead
        db_manager = DBManager(db)
        lead = await db_manager.get_or_create_lead(
            phone=req.lead_data.get("phone") if req.lead_data else None,
            email=req.lead_data.get("email") if req.lead_data else None,
            name=req.lead_data.get("name") if req.lead_data else f"Lead_{req.lead_id}"
        )
        
        # Create inbound state
        state = create_initial_state(
            lead_id=str(lead.id),
            message=req.message,
            channel=req.channel,
            direction="inbound",
            lead_data=req.lead_data
        )
        
        # Run inbound workflow
        final_state = await workflow_router.run(state)
        
        # Return response
        intelligence = final_state.get("intelligence_output", {})
        return {
            "status": "success",
            "response": intelligence.get("response_text"),
            "intent": intelligence.get("intent"),
            "confidence": intelligence.get("intent_confidence"),
            "requires_human": intelligence.get("requires_human", False)
        }
    
    except Exception as e:
        logger.error(f"Inbound message failed: {e}")
        raise HTTPException(status_code=500, detail=str(e))


# ============================================================================
# OUTBOUND ENDPOINTS
# ============================================================================

@router.get("/outbound/approval-queue")
async def get_approval_queue():
    """Get leads pending approval"""
    try:
        queue = await lead_manager_agent.get_approval_queue()
        return {
            "status": "success",
            "count": len(queue),
            "leads": queue
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.post("/outbound/approve")
async def approve_leads(req: ApprovalRequest):
    """Approve leads for outbound contact"""
    try:
        approved_count = await lead_manager_agent.approve_leads(
            req.lead_ids,
            req.approved_by
        )
        return {
            "status": "success",
            "approved_count": approved_count
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.post("/outbound/call")
async def initiate_outbound_call(
    req: OutboundCallRequest,
    db: AsyncSession = Depends(get_db)
):
    """Manually trigger outbound call"""
    try:
        # Get or create lead
        db_manager = DBManager(db)
        lead = await db_manager.get_or_create_lead(
            phone=req.phone,
            name=req.lead_id or f"Lead_{req.phone[-4:]}"
        )
        
        # Create outbound state
        state = create_initial_state(
            lead_id=str(lead.id),
            message="",  # Will be generated by outbound agent
            channel="call",
            direction="outbound",
            call_type=req.call_type,
            client_type=req.client_type,
            lead_data={"phone": req.phone}
        )
        
        # Mark as approved (manual trigger)
        state["approved_for_contact"] = True
        
        # Run outbound workflow
        final_state = await workflow_router.run(state)
        
        return {
            "status": "success",
            "message": "Outbound call initiated",
            "lead_id": lead.id
        }
    
    except Exception as e:
        logger.error(f"Outbound call failed: {e}")
        raise HTTPException(status_code=500, detail=str(e))


# ============================================================================
# LEAD MANAGER CONTROL
# ============================================================================

@router.post("/lead-manager/start")
async def start_lead_manager():
    """Start Lead Manager continuous operation"""
    try:
        # Start in background
        import asyncio
        asyncio.create_task(lead_manager_agent.start_continuous_operation())
        return {"status": "success", "message": "Lead Manager started"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.post("/lead-manager/stop")
async def stop_lead_manager():
    """Stop Lead Manager"""
    try:
        await lead_manager_agent.stop()
        return {"status": "success", "message": "Lead Manager stopped"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


# ============================================================================
# STATUS ENDPOINTS
# ============================================================================

@router.get("/status/lead/{lead_id}")
async def get_lead_status(lead_id: str, db: AsyncSession = Depends(get_db)):
    """Get lead status and history"""
    try:
        db_manager = DBManager(db)
        lead = await db_manager.get_lead(lead_id)
        
        if not lead:
            raise HTTPException(status_code=404, detail="Lead not found")
        
        return {
            "lead_id": lead.id,
            "name": lead.name,
            "status": lead.status,
            "score": lead.lead_score,
            "last_contact": lead.last_contact_date,
            "attempt_count": lead.attempt_count
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))